---

- name: "Deploying netbootxyz container on {{ inventory_hostname }} host"
  set_fact:
    container_name: "{{ inventory_hostname + '-netbootxyz' }}"

- name: Set latest_release_tag fact
  set_fact:
    latest_release_tag: "{{ (lookup('url', 'https://api.github.com/repos/netbootxyz/netboot.xyz/releases/latest', split_lines=false) | from_json)['tag_name'] }}"

- name: Check for systemd user service config
  stat:
    path: "{{ user_home + '/.config/systemd/user/container-' + container_name + '.service' }}"
  register: _result

- name: Set fact that netbootxyz service config exists
  set_fact:
    netbootxyz_service_defined: "{{ _result.stat.exists }}"

- when: not netbootxyz_service_defined
  block:

    - name: Set netbootxyz volumes facts
      set_fact:
        assets_volume: "{{ container_name + '-assets' }}"
        config_volume: "{{ container_name + '-config' }}"
        home_volume: "{{ container_name + '-home' }}"

    - name: Create netbootxyz volumes
      containers.podman.podman_volume:
        name: "{{ item }}"
        state: 'present'
        recreate: true
      loop:
      - "{{ assets_volume }}"
      - "{{ config_volume }}"
      - "{{ home_volume }}"

    - name: Run the netbootxyz config builder with the config volume
      containers.podman.podman_container:
        name: "{{ container_name + '-config-builder' }}"
        image: "ghcr.io/gmarcy/netboot.xyz-builder:latest"
        user: "{{ user_uid }}"
        remove: true
        detach: false
        cap_add:
          - "AUDIT_WRITE"
        volumes:
          - "{{ config_volume }}:/buildout"
        state: started
      register: _result

    - name: Remove any previous container
      containers.podman.podman_container:
        name: "{{ container_name + '-sleeping' }}"
        state: absent

    - name: Run python container with the assets and config volumes mounted
      containers.podman.podman_container:
        name: "{{ container_name + '-sleeping' }}"
        image: "docker.io/library/python:3.11"
        user: "{{ user_uid }}"
        remove: true
        cap_add:
          - "AUDIT_WRITE"
        volumes:
          - "{{ assets_volume }}:/assets"
          - "{{ config_volume }}:/config"
          - "{{ home_volume }}:/home/netsvcs"
        command: "sleep infinity"
        workdir: "/home/netsvcs"

    - name: Add host for sleeping container
      ansible.builtin.add_host:
        hostname: "{{ container_name + '-sleeping' }}"
        ansible_connection: containers.podman.podman
        ansible_python_interpreter: /usr/local/bin/python3
        ansible_podman_extra_args: --connection "{{ inventory_hostname }}"
      delegate_to: localhost-facts

    - name: "Run tasks in the {{ container_name + '-sleeping' }} container"
      block:

        - name: "Wait for connection to the container {{ container_name + '-sleeping' }}"
          ansible.builtin.wait_for_connection:
            connect_timeout: 20
            sleep: 5
            delay: 5
            timeout: 300

        - name: Create /assets/menu.ipxe
          copy:
            content: |
              #!ipxe

              chain http://192.168.222.253:8080/assets/nbxyz/dualboot.ipxe
            dest: "/assets/menu.ipxe"
            mode: '0644'
            unsafe_writes: true

        - name: Create /config/menuversion.txt
          copy:
            content: "{{ latest_release_tag }}"
            dest: "/config/menuversion.txt"
            mode: '0644'
            unsafe_writes: true

        - name: Create config directories
          file:
            path: "{{ item }}"
            state: 'directory'
            recurse: true
            mode: '0755'
          loop:
          - "/config/log/nginx"
          - "/config/menus/local"
          - "/config/menus/remote"
          - "/config/nginx/site-confs"

        - name: Copy /config/buildout to /config/menus/remote
          copy:
            src: "/config/buildout/"
            dest: "/config/menus/remote/"
            remote_src: true
            mode: "preserve"

        - name: Copy /config/menus/remote to /config/menus
          copy:
            src: "/config/menus/remote/"
            dest: "/config/menus/"
            remote_src: true
            mode: "preserve"

        - name: Remove /config/buildout
          file:
            path: "/config/buildout"
            state: 'absent'

        - name: Touch nginx log files
          file:
            path: "{{ item }}"
            state: 'touch'
            mode: '0644'
          loop:
          - "/config/log/nginx/access.log"
          - "/config/log/nginx/error.log"

        - name: Create /config/nginx/nginx.conf
          copy:
            content: |
              user abc;
              worker_processes 4;
              pid /run/nginx.pid;
              include /etc/nginx/modules/*.conf;
              events {
                  worker_connections 768;
              }
              http {
                  sendfile on;
                  tcp_nopush on;
                  tcp_nodelay on;
                  keepalive_timeout 65;
                  types_hash_max_size 2048;
                  client_max_body_size 0;
                  include /etc/nginx/mime.types;
                  default_type application/octet-stream;
                  access_log /config/log/nginx/access.log;
                  error_log /config/log/nginx/error.log;
                  gzip on;
                  gzip_disable "msie6";
                  include /config/nginx/site-confs/*;
              }
              daemon off;
            dest: "/config/nginx/nginx.conf"
            mode: '0644'
            unsafe_writes: true

        - name: Create /config/nginx/site-confs/default
          copy:
            content: |
              server {
                  listen 3080;
                  location / {
                      root /assets;
                      autoindex on;
                  }
              }
            dest: "/config/nginx/site-confs/default"
            mode: '0644'
            unsafe_writes: true

      vars:
        ansible_ssh_pipelining: False
      delegate_to: "{{ container_name + '-sleeping' }}"

    - name: Remove container
      containers.podman.podman_container:
        name: "{{ container_name + '-sleeping' }}"
        state: absent

    - name: Run the container with podman
      containers.podman.podman_container:
        name: "{{ container_name }}"
        image: 'lscr.io/linuxserver/netbootxyz:latest'
        network: "{{ inventory_hostname + '-network' }}"
        pod: "{{ inventory_hostname + '-pod' }}"
        cap_add:
          - "AUDIT_WRITE"
        env:
          PUID: 1000
          PGID: 1000
          PORT_RANGE: '30000:30010'
        volumes:
          - "{{ assets_volume }}:/assets"
          - "{{ config_volume }}:/config"
        state: 'stopped'
      register: _result_container_info
      retries: 5
      delay: 10
      until: not _result_container_info.failed

    - name: Clear temp facts
      set_fact:
        _result_container_info: null

    - name: Create a systemd unit for the container
      containers.podman.podman_generate_systemd:
        name: "{{ container_name }}"
        dest: "{{ user_home + '/.config/systemd/user/' }}"

    - name: Start the systemd unit
      systemd:
        name: "{{ 'container-' + container_name }}"
        daemon_reload: true
        state: started
        enabled: true
        scope: user
